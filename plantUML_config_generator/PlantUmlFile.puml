@startuml

package cz.osu.kip.action{

class ProjectMenuAction{
- configInfo : ConfigInfo

+ actionPerformed(AnActionEvent e : @NotNull) : void
- showNewForm(rootProject : Project, filePath : File, mainFormWindowItems : MainFormWindowItems) : UmlFormWindow
- makeUmlFormWindowListener(umlFormWindow : UmlFormWindow) : void
}

AnAction <|.. ProjectMenuAction

class TopMenuAction{
+ actionPerformed(AnActionEvent e : @NotNull) : void
- makeConfigFormWindowListener(rootProject : Project, configFormWindow : ConfigFormWindow) : void
- deleteSelectedConfigFiles(files : List<File>, configFormWindow : ConfigFormWindow) : void
- generateUmlDiagramsBySelectedConfigFiles(files : List<File>, rootProject : Project) : void
- getSubdirs(file : File) : List<File>
}

DumbAwareAction <|.. TopMenuAction


}

package cz.osu.kip.appLogic{

class ConfigInfo{
- initialUrl : String
- umlTargetDestination : String
- configTargetDestination : String
- packages : List<String>
- classes : boolean
- publicClasses : boolean
- defaultClasses : boolean
- attributesForClasses : boolean
- methodsForClasses : boolean
- innerClasses : boolean
- publicAttributesForClasses : boolean
- privateAttributesForClasses : boolean
- protectedAttributesForClasses : boolean
- internalAttributesForClasses : boolean
- publicMethodsForClasses : boolean
- privateMethodsForClasses : boolean
- protectedMethodsForClasses : boolean
- internalMethodsForClasses : boolean
- interfaces : boolean
- publicInterfaces : boolean
- defaultInterfaces : boolean
- attributesForInterfaces : boolean
- methodsForInterfaces : boolean

+ ConfigInfo(mainFormWindowItems : MainFormWindowItems)
- processPackages(mainFormWindowItems : MainFormWindowItems) : void
- processConfigTargetDestination(mainFormWindowItems : MainFormWindowItems) : void
- processUmlTargetDestination(mainFormWindowItems : MainFormWindowItems) : void
- getSubdirs(file : File) : List<File>
+ getInitialUrl() : String
+ getUmlTargetDestination() : String
+ getConfigTargetDestination() : String
+ getPackages() : List<String>
+ isClasses() : boolean
+ isPublicClasses() : boolean
+ isDefaultClasses() : boolean
+ isAttributesForClasses() : boolean
+ isMethodsForClasses() : boolean
+ isInnerClasses() : boolean
+ isPublicAttributesForClasses() : boolean
+ isPrivateAttributesForClasses() : boolean
+ isProtectedAttributesForClasses() : boolean
+ isInternalAttributesForClasses() : boolean
+ isPublicMethodsForClasses() : boolean
+ isPrivateMethodsForClasses() : boolean
+ isProtectedMethodsForClasses() : boolean
+ isInternalMethodsForClasses() : boolean
+ isInterfaces() : boolean
+ isPublicInterfaces() : boolean
+ isDefaultInterfaces() : boolean
+ isAttributesForInterfaces() : boolean
+ isMethodsForInterfaces() : boolean
+ toString() : String
}


class ConfigInfoToMainFormWindowItemsConvertor{
+ <<static>> convert(configInfo : ConfigInfo, rootProject : Project, filePath : File) : MainFormWindowItems
- <<static>> convertPackagesToTreeViewWindow(configInfo : ConfigInfo, mainFormWindowItems : MainFormWindowItems, initialURL : String) : void
- <<static>> makeFolderLevelFromEachPackage(configInfo : ConfigInfo, initialURL : String) : List<FolderLevel>
+ <<static>> getCorrectInitialURL(initialURL : String) : String
- <<static>> convertConfigTargetDestination(configInfo : ConfigInfo, mainFormWindowItems : MainFormWindowItems, filePath : File) : void
- <<static>> convertUMLTargetDestination(configInfo : ConfigInfo, mainFormWindowItems : MainFormWindowItems, filePath : File) : void
}


class FileController{
+ <<static>> loadFileToLines(fileName : String) : List<String>
+ <<static>> saveToFile(fileName : String, text : String) : void
}


class FileExplorer{
+ <<static>> getJavaFiles(folderUrls : List<File>) : List<File>
+ <<static>> getConfigFiles(folderUrls : List<File>) : List<File>
}


class Generator{
+ <<static>> createUmlFile(mainFormWindowItems : MainFormWindowItems, configInfo : ConfigInfo) : void
- <<static>> processPackagesAndSubpackages(configInfo : ConfigInfo, sb : StringBuilder, packageXES : List<PackageX>) : void
- <<static>> checkIfIsSubpackageOrCloseLastPackage(sb : StringBuilder, notClosed : List<PackageX>, missing : int, packageX : PackageX) : int
+ <<static>> createConfigFile(configInfo : ConfigInfo) : void
+ <<static>> getPackageXESFromFiles(files : List<File>) : List<PackageX>
+ <<static>> getPackageXFromFile(fileInput : File) : PackageX
+ <<static>> getDataFromFile(rootProject : Project, filePath : File) : MainFormWindowItems
- <<static>> convertTextToConfigInfoByGson(text : StringBuilder) : ConfigInfo
- <<static>> getFolders(mainFormWindowItems : MainFormWindowItems, configInfo : ConfigInfo) : List<File>
}


class PackageFormException{
+ PackageFormException()
}

Exception <|.. PackageFormException

package cz.osu.kip.appLogic.umlGeneration{

class AttributeX{
- status : String
- type : String
- name : String
- staticStatus : boolean

+ AttributeX(status : String, type : String, name : String, isStatic : boolean)
+ getStatus() : String
+ getType() : String
+ getName() : String
+ isStatic() : boolean
}


class ClassX{
- name : String
- type : String
- isPublic : boolean
- extendStatus : boolean
- extendedClassesX : List<String>
- implementStatus : boolean
- implementedInterface : List<String>
- attributeXES : List<AttributeX>
- methodXES : List<MethodX>
- innerClassesX : List<ClassX>

+ ClassX(name : String, type : String, isPublic : boolean, extendStatus : boolean, extendedClassesX : List<String>, implementStatus : boolean, implementedInterface : List<String>, attributeXES : List<AttributeX>, methodXES : List<MethodX>)
+ addInnerClassesX(innerClassesX : List<ClassX>) : void
+ getInnerClassesX() : List<ClassX>
+ isPublic() : boolean
+ getName() : String
+ getType() : String
+ isExtendStatus() : boolean
+ getExtendedClassesX() : List<String>
+ isImplementStatus() : boolean
+ getImplementedInterface() : List<String>
+ getAttributes() : List<AttributeX>
+ getMethods() : List<MethodX>
}


class InputParameterX{
- type : String
- name : String

+ InputParameterX(type : String, name : String)
+ getType() : String
+ getName() : String
}


class MethodX{
- status : String
- returningType : String
- name : String
- inputParameterXES : List<InputParameterX>
- staticStatus : boolean

+ MethodX(status : String, returningType : String, name : String, inputParameterXES : List<InputParameterX>, isStatic : boolean)
+ getStatus() : String
+ getReturningType() : String
+ getName() : String
+ getInputParameters() : List<InputParameterX>
+ isStaticStatus() : boolean
}


class PackageX{
- name : String
- classXES : List<ClassX>

+ PackageX(name : String, classXES : List<ClassX>)
+ getName() : String
+ getClassXES() : List<ClassX>
+ addClassX(classX : ClassX) : void
}


class PackageXByFileConvertor{
+ <<static>> getPackageXWithClassesFromLines(lines : List<String>) : PackageX
- <<static>> getClassX(lines : List<String>, i : int) : ClassX
- <<static>> getClassXFromLines(lines : List<String>, i : int, linesOfOneClass : List<String>, classX : ClassX, countOfNestingOfParenthesis : int, countOfNestingOfInnerClasses : int, innerClassesX : List<ClassX>, stillComment : boolean) : ClassX
}


class UmlFilter{
- <<static>> configInfo : ConfigInfo

+ <<static>> getConfigInfo() : ConfigInfo
+ <<static>> getTextByConfigInfo(configInfo : ConfigInfo, packageX : PackageX) : String
- <<static>> processInterfaces(packageX : PackageX, sb : StringBuilder) : void
- <<static>> processClassesX(packageX : PackageX, sb : StringBuilder) : void
- <<static>> convertClassToUml(classX : ClassX) : String
- <<static>> convertAttributesForClassX(classX : ClassX, sb : StringBuilder) : void
- <<static>> convertMethodsForClassX(classX : ClassX, sb : StringBuilder) : void
- <<static>> printMethodInfoToUml(sb : StringBuilder, methodX : MethodX) : void
+ <<static>> convertToUmlFormatAssociations(classX : ClassX) : String
+ <<static>> convertToUmlFormatNestedClassesXAssociations(classX : ClassX) : String
+ <<static>> convertInputParametersToUmlFormat(inputParameterX : InputParameterX) : String
}



}


}

package cz.osu.kip.view{

class ClassToShowOptionDialogsWithTimer{
+ <<static>> showOptionDialogWithTimer(text : String, seconds : int) : void
}


package cz.osu.kip.view.configForm{

class ConfigFormWindow{
~ configFiles : List<FolderLevel>
~ rootProject : File
- contentPanel : JPanel
- submitState : SubmitStateForConfigFormWindow
- title : String

+ ConfigFormWindow(configFiles : List<File>, rootProject : File)
+ getConfigFiles() : List<FolderLevel>
+ getSubmitState() : SubmitStateForConfigFormWindow
- convertConfigFilesToFolderLevels(configFiles : List<File>) : List<FolderLevel>
- makeFrame() : void
- makeContentPanel() : JPanel
- createButtonPanel() : JPanel
}

JFrame <|.. ConfigFormWindow


}

package cz.osu.kip.view.mainForm{

class FolderLevel{
- name : String
- url : File
- level : int
- jCheckBox : JBCheckBox

+ FolderLevel(newFolderLevel : FolderLevel, initialUrl : String)
+ FolderLevel(name : String, url : File, level : int, initialUrl : String)
+ getjCheckBox() : JBCheckBox
+ setjCheckBox(jCheckBox : JBCheckBox) : void
+ getName() : String
+ setName(name : String) : void
+ getUrl() : File
+ setUrl(url : File) : void
+ getLevel() : int
+ setLevel(level : int) : void
+ toString() : String
}


class FolderLevelComparator{
+ compare(fl1 : FolderLevel, fl2 : FolderLevel) : int
}

Comparator <|.. FolderLevelComparator

class MainFormWindowItems{
- umlFormWindow : UmlFormWindow
- defaultUMLTargetDestination : JRadioButton
- ownUMLTargetDestination : JRadioButton
- buttonGroupUMLTargetDestination : ButtonGroup
- defaultUMLTargetDestinationDesc : JLabel
- defaultConfigTargetDestination : JRadioButton
- ownConfigTargetDestination : JRadioButton
- buttonGroupConfigTargetDestination : ButtonGroup
- defaultConfigTargetDestinationDesc : JLabel
- allPackages : JRadioButton
- ownPackages : JRadioButton
- buttonToShowSelectedPackages : JButton
- buttonGroupPackages : ButtonGroup
- defaultUMLTargetFile : JFileChooser
- defaultConfigTargetFile : JFileChooser
- classesCheckBox : JCheckBox
- interfacesCheckBox : JCheckBox
- publicForClassCheckBox : JCheckBox
- defaultForClassCheckBox : JCheckBox
- publicForInterfaceCheckBox : JCheckBox
- defaultForInterfaceCheckBox : JCheckBox
- checkBoxForClassAttributes : JCheckBox
- checkBoxForClassMethods : JCheckBox
- checkBoxForInnerClasses : JCheckBox
- checkBoxForPrivateClassAttributes : JCheckBox
- checkBoxForPublicClassAttributes : JCheckBox
- checkBoxForProtectedClassAttributes : JCheckBox
- checkBoxForInternalClassAttributes : JCheckBox
- checkBoxForPrivateClassMethods : JCheckBox
- checkBoxForPublicClassMethods : JCheckBox
- checkBoxForProtectedClassMethods : JCheckBox
- checkBoxForInternalClassMethods : JCheckBox
- checkBoxForInterfaceAttributes : JCheckBox
- checkBoxForInterfaceMethods : JCheckBox
- packagesTreeViewWindow : PackagesTreeViewWindow
- initialUrl : String

- defaultUMLTargetDestinationListener = new ActionListener() : ActionListener
- ownUMLTargetDestinationListener = new ActionListener() : ActionListener
- defaultConfigTargetDestinationListener = new ActionListener() : ActionListener
- ownConfigTargetDestinationListener = new ActionListener() : ActionListener
- ownPackagesListener = new ActionListener() : ActionListener
- classesListener = new ActionListener() : ActionListener
- classesAttributesListener = new ActionListener() : ActionListener
- classesMethodesListener = new ActionListener() : ActionListener
- interfacesListener = new ActionListener() : ActionListener
+ MainFormWindowItems(filePath : File, umlFormWindow : UmlFormWindow)
+ getUmlFormWindow() : UmlFormWindow
+ setUmlFormWindow(umlFormWindow : UmlFormWindow) : void
- setDefaultTargetDestinationText(filePath : File) : String
- setButtonGroup(buttons : JRadioButton...) : ButtonGroup
+ getButtonToShowSelectedPackages() : JButton
+ getAllPackages() : JRadioButton
+ getOwnPackages() : JRadioButton
+ getClassesCheckBox() : JCheckBox
+ setClassesCheckBox(selected : boolean) : void
+ getInterfacesCheckBox() : JCheckBox
+ setInterfacesCheckBox(selected : boolean) : void
+ getDefaultUMLTargetFile() : JFileChooser
+ getDefaultConfigTargetFile() : JFileChooser
+ getDefaultUMLTargetDestination() : JRadioButton
+ getOwnUMLTargetDestination() : JRadioButton
+ setOwnUMLTargetDestination(umlTargetDestination : String) : void
+ getDefaultUMLTargetDestinationDesc() : JLabel
+ setDefaultUMLTargetDestinationDesc(defaultUMLTargetDestinationDesc : JLabel) : void
+ getDefaultConfigTargetDestination() : JRadioButton
+ getOwnConfigTargetDestination() : JRadioButton
+ setOwnConfigTargetDestination(configTargetDestination : String) : void
+ getDefaultConfigTargetDestinationDesc() : JLabel
+ setDefaultConfigTargetDestinationDesc(defaultConfigTargetDestinationDesc : JLabel) : void
+ getPublicForClassCheckBox() : JCheckBox
+ setPublicForClassCheckBox(selected : boolean) : void
+ getDefaultForClassCheckBox() : JCheckBox
+ setDefaultForClassCheckBox(selected : boolean) : void
+ getPublicForInterfaceCheckBox() : JCheckBox
+ setPublicForInterfaceCheckBox(selected : boolean) : void
+ getDefaultForInterfaceCheckBox() : JCheckBox
+ setDefaultForInterfaceCheckBox(selected : boolean) : void
+ getTreeViewWindow() : PackagesTreeViewWindow
+ getCheckBoxForClassAttributes() : JCheckBox
+ setCheckBoxForClassAttributes(selected : boolean) : void
+ getCheckBoxForClassMethods() : JCheckBox
+ setCheckBoxForClassMethods(selected : boolean) : void
+ getCheckBoxForInnerClasses() : JCheckBox
+ setCheckBoxForInnerClasses(selected : boolean) : void
+ getCheckBoxForPrivateClassAttributes() : JCheckBox
+ setCheckBoxForPrivateClassAttributes(selected : boolean) : void
+ getCheckBoxForPublicClassAttributes() : JCheckBox
+ setCheckBoxForPublicClassAttributes(selected : boolean) : void
+ getCheckBoxForProtectedClassAttributes() : JCheckBox
+ setCheckBoxForProtectedClassAttributes(selected : boolean) : void
+ getCheckBoxForInternalClassAttributes() : JCheckBox
+ setCheckBoxForInternalClassAttributes(selected : boolean) : void
+ getCheckBoxForPrivateClassMethods() : JCheckBox
+ setCheckBoxForPrivateClassMethods(selected : boolean) : void
+ getCheckBoxForPublicClassMethods() : JCheckBox
+ setCheckBoxForPublicClassMethods(selected : boolean) : void
+ getCheckBoxForProtectedClassMethods() : JCheckBox
+ setCheckBoxForProtectedClassMethods(selected : boolean) : void
+ getCheckBoxForInternalClassMethods() : JCheckBox
+ setCheckBoxForInternalClassMethods(selected : boolean) : void
+ getCheckBoxForInterfaceAttributes() : JCheckBox
+ setCheckBoxForInterfaceAttributes(selected : boolean) : void
+ getCheckBoxForInterfaceMethods() : JCheckBox
+ setCheckBoxForInterfaceMethods(selected : boolean) : void
+ setDefaultUMLTargetDestination() : void
+ setDefaultConfigTargetDestination() : void
+ setOwnPackages(packagesTreeViewWindow : PackagesTreeViewWindow, initialUrl : String) : void
}


class MainFormWindowPanels{
- currentProject : Project
- filePath : File
- mainFormWindowItems : MainFormWindowItems
- scrollablePanel : JPanel
- contentPanel : JPanel
- targetUMLDestinationPanel : JPanel
- targetConfigDestinationPanel : JPanel
- packagesPanel : JPanel
- classesInterfacesPlusModifiersPanel : JPanel
- attributesMethodsInnerClassesPanel : JPanel

+ MainFormWindowPanels(currentProject : Project, filePath : File, mainFormWindowItems : MainFormWindowItems)
+ getContentPanel() : JPanel
+ getScrollablePanel() : JPanel
- makeScrollablePanel() : JPanel
- makeContentPanel() : JPanel
- setMainContextPanelLayout(groupLayout : GroupLayout) : void
+ setUMLTargetDestinationPanel() : void
+ setConfigTargetDestinationPanel() : void
+ setPackagesPanel() : void
+ setClassesInterfacesPlusModifiersPanel() : void
- setSubpanelsLayout(jPanel : JPanel) : GroupLayout
}


class PackagesTreeViewWindow{
- folders : java.util.List<FolderLevel>
- wasCanceled : boolean
- initialUrl : String

+ PackagesTreeViewWindow(newPackagesTreeViewWindow : PackagesTreeViewWindow, initialUrl : String)
+ PackagesTreeViewWindow(newFolders : List<FolderLevel>, initialUrl : String)
+ PackagesTreeViewWindow(filePath : File)
+ getFolders() : List<FolderLevel>
- makeFrame() : void
- makeContentPanel(frame : JFrame) : JPanel
- makeListenerForCheckBox(folderLevel : FolderLevel, panel : JPanel, frame : JFrame, newJpanel : JPanel) : ActionListener
- addToPanel(fl : FolderLevel, newJpanel : JPanel, panel : JPanel, frame : JFrame) : void
- makeLevels(filePath : File, directories : File[]) : List<FolderLevel>
+ getDirectoryPathWithoutFile(filePath : File) : File
- getDirectories(filePath : File) : File[]
+ isWasCanceled() : boolean
- createButtonPanel() : JPanel
}

JFrame <|.. PackagesTreeViewWindow

class UmlFormWindow{
- <<static>> currentProject : Project
- <<static>> filePath : File
- mainFormWindowItems : MainFormWindowItems
- mainFormWindowPanels : MainFormWindowPanels
- submitState : SubmitStateForFormWindow
- title : String

+ UmlFormWindow(currentProject : Project, filePath : File)
+ UmlFormWindow(currentProject : Project, filePath : File, mainFormWindowItems : MainFormWindowItems)
+ <<static>> getFilePath() : File
+ getMainFormWindowItems() : MainFormWindowItems
+ setMainFormWindowItems(mainFormWindowItems : MainFormWindowItems) : void
+ getSubmitState() : SubmitStateForFormWindow
+ showFormWindow() : void
- createButtonPanel() : JPanel
+ refresh() : void
}

JFrame <|.. UmlFormWindow


}


}

@enduml